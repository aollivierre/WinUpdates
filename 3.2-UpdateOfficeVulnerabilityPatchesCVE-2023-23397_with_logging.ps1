if (-not $PSVersionTable.PSVersion -or $PSVersionTable.PSVersion.Major -lt 3) {
    $scriptPath = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
}
else {
    $scriptPath = $PSScriptRoot
}


#Export Details for the Service Manager and the Windows Update Settings
$CSVdir = "$scriptPath\exports\CSV"
if (!(Test-Path $CSVdir)) {
    # New-Item -ItemType Directory -Path $CSVFilePath -Force | Out-Null
    New-Item -ItemType Directory -Path $CSVdir -Force
}


function AppendCSVLog {
    param (
        [string]$Message,
        [string]$CSVFilePath
        # [string]$CSVFilePath = "$scriptPath\exports\CSV\$(Get-Date -Format 'yyyy-MM-dd')-Log.csv"
    )

    $csvData = [PSCustomObject]@{
        TimeStamp    = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        ComputerName = $env:COMPUTERNAME
        Message      = $Message
    }

    $csvData | Export-Csv -Path $CSVFilePath -Append -NoTypeInformation -Force
}

function Write-EventLogMessage {
    param (
        [string]$Message,
        [string]$LogName = 'PowerShellScriptLog'
    )

    # $source = 'PowerShell Script'
    # if (-not (Get-WinEvent -LogName $LogName -ErrorAction SilentlyContinue)) {
    #     New-EventLog -LogName $LogName -Source $source
    # }


    $source = "PowerShell Script"
    # $logName = "MyCustomLog"

    if ($PSVersionTable.PSVersion.Major -lt 6) {
        # PowerShell version is less than 6, use New-EventLog
        if (-not ([System.Diagnostics.EventLog]::SourceExists($source))) {
            New-EventLog -LogName $logName -Source $source
            Write-Host "Event source '$source' created in log '$logName'"
        }
        else {
            Write-Host "Event source '$source' already exists"
        }
    }
    else {
        # PowerShell version is 6 or greater, use System.Diagnostics.EventLog
        if (-not ([System.Diagnostics.EventLog]::SourceExists($source))) {
            [System.Diagnostics.EventLog]::CreateEventSource($source, $logName)
            Write-Host "Event source '$source' created in log '$logName'"
        }
        else {
            Write-Host "Event source '$source' already exists"
        }
    }

    # Write-EventLog -LogName $LogName -Source $source -EntryType Information -EventId 1 -Message $Message


    # $source = "MyCustomSource"
    # $logName = "MyCustomLog"
    $eventID = 1000
    # $eventMessage = "This is a test event log entry."

    if ($PSVersionTable.PSVersion.Major -lt 6) {
        # PowerShell version is less than 6, use Write-EventLog
        Write-EventLog -LogName $logName -Source $source -EntryType Information -EventId $eventID -Message $Message
        # Write-EventLog -LogName $LogName -Source $source -EntryType Information -EventId 1 -Message $Message
        Write-Host "Event log entry written using Write-EventLog"
    }
    else {
        # PowerShell version is 6 or greater, use System.Diagnostics.EventLog
        $eventLog = New-Object System.Diagnostics.EventLog($logName)
        $eventLog.Source = $source
        $eventLog.WriteEntry($Message, [System.Diagnostics.EventLogEntryType]::Information, $eventID)
        Write-Host "Event log entry written using System.Diagnostics.EventLog"
    }


}

function Write-Log {
    param (
        [string]$Message,
        # [string]$CSVFilePath = "C:\logs\$(Get-Date -Format 'yyyy-MM-dd')-$($env:COMPUTERNAME)-Log.csv"
        [string]$CSVFilePath = "$scriptPath\exports\CSV\$(Get-Date -Format 'yyyy-MM-dd')-Log.csv"
    )

    Write-Output $Message
    AppendCSVLog -Message $Message -CSVFilePath $CSVFilePath
    Write-EventLogMessage -Message $Message
}


# ... (rest of the script)

# Replace all Write-Output statements with Write-Log, for example:
# Write-Log -Message "$installedproduct $installedversion installed." -CSVFilePath $csvLogFile
# Do this for all Write-Output statements

# ... (rest of the script)



$computerName = $env:COMPUTERNAME
$logPath = "$scriptPath\exports\Logs\$computerName\$(Get-Date -Format 'yyyy-MM-dd-HH-mm-ss')\"
if (!(Test-Path $logPath)) {
    New-Item -ItemType Directory -Path $logPath -Force | Out-Null
}
$logFile = "${logPath}UpdateOfficeVulnerabilityPatchesCVE-2023-23397.log"
Start-Transcript -Path $logFile





# Define parameters using splatting
$getItemPropertyParams = @{
    Path        = 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
    'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*'
    ErrorAction = 'SilentlyContinue'
}

# Check for Office Click-To-Run Products
$officeC2R = Get-ItemProperty @getItemPropertyParams |
Where-Object {
    $_.DisplayName -like "*Microsoft Office Professional Plus 2019*" -or
    $_.DisplayName -like "*Microsoft Office Professional Plus 2021*" -or
    $_.DisplayName -like "*Microsoft Office 365*" -or
    $_.DisplayName -like "*Microsoft 365*"
}


# Update Click-To-Run Office Products (Office 2019, 2021, 365, etc)
if ($null -ne $officeC2R) {
    $installedversion = $officeC2R.DisplayVersion
    $installedproduct = $officeC2R.DisplayName
    Write-Log "$installedproduct $installedversion installed."
    $channel = Get-ItemPropertyValue "HKLM:\SOFTWARE\Microsoft\Office\ClickToRun\Configuration" -Name UpdateChannel
    if ($channel -eq 'http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60') {
        Write-Log "Current Channel"
        $version = '16.0.16130.20306'
    }
    elseif ($channel -eq 'http://officecdn.microsoft.com/pr/55336b82-a18d-4dd6-b5f6-9e5095c314a6') {
        Write-Log "Monthly Enterprise Channel"
        $version = '16.0.16026.20238'
    }
    elseif ($channel -eq 'http://officecdn.microsoft.com/pr/b8f9b850-328d-4355-9145-c59439a0c4cf') {
        Write-Log "Semi-Annual Enterprise Channel (Preview)"
        $version = '16.0.16130.20306'
    }
    elseif ($channel -eq 'http://officecdn.microsoft.com/pr/7ffbc6bf-bc32-4f92-8982-f9dd17fd3114') {
        Write-Log "Semi-Annual Enterprise Channel"
        $version = '16.0.15601.20578'
    }
    elseif ($channel -eq 'http://officecdn.microsoft.com/pr/f2e724c1-748f-4b47-8fb8-8e0d210e9208') {
        Write-Log "2019 Volume Licensed Channel"
        $version = '16.0.10395.20023'
    }
    elseif ($channel -eq 'http://officecdn.microsoft.com/pr/5030841d-c919-4594-8d2d-84ae4f96e58e') {
        Write-Log "LTSC 2021 Volume Licensed Channel"
        $version = '16.0.14332.20481'
    }
    else {
        Write-Log "Channel URL $channel not listed in script"
        $version = "N/A"
    }

    if ($version -ne "N/A") {
        if ($installedversion -lt $version) {
            Write-Log "$installedproduct needs to be patched"
            Start-Process -WindowStyle hidden -FilePath "C:\Program Files\Common Files\microsoft shared\ClickToRun\OfficeC2RClient.exe" -ArgumentList "/update user updatepromptuser=false forceappshutdown=true displaylevel=false" -Wait
        }
        else {
            Write-Log "$installedproduct is up to date"
        }
    }
}    


# Define parameters using splatting
$getItemPropertyParams = @{
    Path        = 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*',
    'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*'
    ErrorAction = 'SilentlyContinue'
}

# Check for Office 2013
$office2013 = Get-ItemProperty @getItemPropertyParams |
Where-Object {
    $_.DisplayName -like "*Microsoft Office Professional Plus 2013*"
}

# Check for Office 2016
$office2016 = Get-ItemProperty @getItemPropertyParams |
Where-Object {
    $_.DisplayName -like "*Microsoft Office Professional Plus 2016*"
}


if ($office2013) {
    Write-Log "Office 2013 is installed."
}
elseif ($office2016) {
    Write-Log "Office 2016 is installed."
}
else {
    Write-Log "Office 2013 or 2016 are not installed."
    exit
}

#Check for NuGet on the device and install if not present
Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
if (Get-PackageProvider -Name NuGet) {
    Write-Host "NuGet Package already exists"
}
else {
    Write-Log "Installing NuGet"
    Install-PackageProvider -Name NuGet -force
}   

# Install PSWindowsUpdate PowerShell module if needed
if (!(Get-Module -Name PSWindowsUpdate -ListAvailable)) {
    Write-Log "PSWindowsUpdate module not found. Installing module..."
    Install-Module -Name PSWindowsUpdate -Force
    Import-Module -Name PSWindowsUpdate
}
else {
    Write-Log "PSWindowsUpdate module already installed."
}

#Export Details for the Service Manager and the Windows Update Settings
$csvPath = "$scriptPath\exports\CSV\$computerName\$(Get-Date -Format 'yyyy-MM-dd-HH-mm-ss')\"
if (!(Test-Path $csvPath)) {
    New-Item -ItemType Directory -Path $csvPath -Force | Out-Null
}

Get-WUServiceManager | Export-Csv -Path "${csvPath}WUServiceManager.csv" -NoTypeInformation
Get-WUSettings | Export-Csv -Path "${csvPath}WUSettings.csv" -NoTypeInformation


Get-WUServiceManager 

Get-WUSettings

# Temporarily disable WSUS
$wsusRegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
$wsusValue = Get-ItemPropertyValue -Path '$wsusRegPath' -Name UseWUServer -ErrorAction SilentlyContinue
if ($null -ne $wsusValue) {
    Write-Log "Disabling WSUS"
    Set-ItemProperty -Path $wsusRegPath -Name UseWUServer -Value 0
}

# Temporarily disable Windows Update for Business deferral period
$wufbRegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
$wufbValue = (Get-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -ErrorAction SilentlyContinue).DeferQualityUpdatesPeriodInDays
if ($null -ne $wufbValue) {
    if ($wufbValue -ne 0) {
        Write-Log "Disabling Windows Update for Business deferral period"
        Set-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -Value 0
    }
    else {
        Write-Log "WUfB deferral period already zero"
    }
}

# Check if Office 2013 is installed and if the KB5002265 update is installed
if ($null -ne $office2013) {
    $KB5002265_installed = Get-WindowsUpdate -KBArticleID KB5002265 -IsInstalled

    # If the KB5002265 update is not installed, install it
    if (!$KB5002265_installed) {
        Write-Log "Installing KB5002265 for Office 2013"
        Install-WindowsUpdate -KBArticleID KB5002265 -MicrosoftUpdate -IgnoreReboot -Verbose -Confirm:$false
    }
    else {
        Write-Log "No Outlook 2013 CVE-2023-23397 vulnerability"
    }
}
# Check if Office 2016 is installed and if the KB5002254 update is installed
if ($null -ne $office2016) {
    $KB5002254_installed = Get-WindowsUpdate -KBArticleID KB5002254 -IsInstalled

    # If the KB5002254 update is not installed, install it
    if (!$KB5002254_installed) {
        Write-Log "Installing KB5002254 for Office 2016"
        Install-WindowsUpdate -KBArticleID KB5002254 -MicrosoftUpdate -IgnoreReboot -Verbose -Confirm:$false
    }
    else {
        Write-Log "No Outlook 2016 CVE-2023-23397 vulnerability"
    }
}

# Return UseWUServer to previous value
if ($null -ne $wsusValue) {
    Write-Log "Enabling WSUS"
    Set-ItemProperty -Path $wsusRegPath -Name UseWUServer -Value $wsusValue
}

# Return DeferQualityUpdatesPeriodInDays to previous value
if ($null -ne $wufbValue) {
    Write-Log "Enabling Windows Update for Business deferral period"
    Set-ItemProperty -Path $wufbRegPath -Name DeferQualityUpdatesPeriodInDays -Value $wufbValue
}



# Stop transcript
Stop-Transcript